Ongoing tasks in order of priority:
- Implement Effects
	- Decided the following structure:
		- Define an effect class with an ENUM tag and any parameters needed
		- Only interactions and events. Spells are only interactions when played
		- All interactions and events have effect handlers, pass the user of such effect. Also pass a ctx when applies
		- Need to define a pre-placeable id, with playedCard, w owner, and then branch skill with targeted option
		- Serialization and de-serialization of effects will be done as a master enum and then the context will be a bag of stuff
		- Interaction handler with Entity passed, additional bag of data (e.g. damaged entity, damage amount, overflow, etc), and obviously a context info to operate with (e.g. how much damage I deal when I play, how many cards I'll draw)
	- TODO:
		- Re-unify dealing of damage
		- Implement tokenized system and overkill counter (eventually may be pushed and it's an easy insert)
		- Define effect struct, bag of context and yolo, why optimize it... (readonly!)
		- Implement interaction as interaction type and ctx elem
		- Interaction handler with Card base, gets Ctx bag. For now they don't clone but instead use the original one? Unless interactions are added later but dealt later.
		  Only card base needed, interaction type will decode the rest. E.g. when combat, implies I'm unit, so on.
		  When march starts on my same tile, that's a placeable, regardless of what.
	- Brainstorm results:
			class:
			list[] effects [effect1, effect2];
			foreach I switch eff type and perform it, in order
			interactions may ensue of course
			
			Finally, other cards reuse the effect type and triggered through interactions. "When played" is an interaction, and so it's easily defined here.
			CARD
			{
				dict{interaction, effects[]}: [[effs1][effs2]]
			}
			PLAYABLE
			{
				dict{event,effects[]}: [[effs1][effs2]]
			}
			In each case, when effect is called:
			effect_handler(user, effect_ctx)
			{
				switch:
				{
				case A:
					var as A
					lanedmg(spell, ctx)
				}
			}
			problem is, need an inbetween stage of card for spell? Before placeable? when this "thing" kills or whatever,
			Needs to contain lanetarget, owner (bump above!), in future may have extra stuff I guess

			summon, card, laneTarget (multi), mode = etc

			deal lane, first, 2

			deal lane, first, 1 (interactions)

			(eot)
			deal direct, 2

			on INTERACTION, has interaction unit, combat, stepin, being step on, etc
			interaction, begin combat, end combat, etc, has ctx and user

			=> Define an effect type which inside has the id only
			=> Then a specific effect which inside has all params I need
			& then, 
- Rush
	- Rush behaviour, flags and flag clean at beginning of turn
	- Rush "card" as a skill card of cost 5 with effect list of (summon X lane 1) (summon X lane 2) (summon X lane 3)
- Buildings
	- Buildings also summoned, more complex behaviour as BP are involved and only one building can be placed
		- Cards number -1000000000 to -1999999999 -> Playable token buildings, procedurally generated as 1-G-HP-[bPlain-bForest-bMountain](packed 18-bit binary, 4-6-8bit)-TGT
	- Bldg damage
- Stealth
- Implement complex effects:
	- Events (when an effect occurs globally and triggers a unit, e.g. EOT)
	- Events (hashable, serializable in unit but not on main). THEY ARE IMPLEMENTED THROUGH AN EVENT HANDLER IN THE STATE MACHINE, WHICH IS PROPERLY FILLED/EMPTIED WHEN PLACEABLE ENTERS/LEAVES
	- Filters	
	- Resulting action. Can this be done in a smooth way? Proposal: new class with Enum + <T1,T2,etc>. Idea is that similar to event handler, but with different enum, is processed where corresponds, and launched by event. By the time we reach unit effect, we run the effect, description of effect can also be fine tuned. E.g. effect, summons X (in lane), summons X (in lane), summons X (in lane), etc. 3 events. Skill card then also is simply a list of effects (when played). While playables have interrups.
	---
	- Buff tokens
	- Buff tok is just extra fields (hashable and serializable) on the placeable
MACHINE, INSTEAD GENERATED IN A LOADED GAME OR AS THINGS ARE PLACED
- Implement rest of rulebook
	- Todo...
	- Lots of individual mechanics that will be polished as it goes, individual card testing
