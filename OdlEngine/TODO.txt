Ongoing tasks in order of priority:
- TrigInterEffect Test class. Test in depth all sorts of effects, use gard getter and custom json cards for this
	- Remove rush from hardcode, add instead to (new) PlayerState ActivePowerCast variable which has RUSH as default! That way we test only effect not rush
	- Idea is to make it card/group independent while all effects work
- Stealth
	- Stealth test cases:
	- Stealth properly interacting with effects that change boardstate besides the stealth unit effect
		- Stelath unit building
		- Stealth unit building stealt building
		- Stelath building being built period
		- On consturciton effect activated for stealth building
		- Building being skipped by stealth (non-existing) unit, built by another one in tile
		- Similarly, Building skipped by stealth (non-existing) unit, built by another unit but that unit activates effect
- Implement complex effects:
	- Events (when an effect occurs globally and triggers a unit, e.g. EOT). Loaded as dict <EventType, List<Entity>> of entities with the effect. This can be serialized, non-hashed.
	- Filters?
	---
	- Buff tokens
	- Buff tok is just extra fields (hashable and serializable) on the placeable
- Implement rest of rulebook
	- Procedure:
		- Propose card, way to code it
		- Add triginters if not there already
		- Ask yourself questions of how it could break the game, how it affects stealth, probably triginter related but good excercise
		- No individual card testing! Game must be mechanically robust even if cards are completely revamped
