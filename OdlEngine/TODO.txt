Ongoing tasks in order of priority:
- Buildings
	- Buildings also summoned, more complex behaviour as BP are involved and only one building can be placed
		- Cards number -1000000000 to -1999999999 -> Playable token buildings, procedurally generated as 1-G-HP-[bPlain-bForest-bMountain](packed 18-bit binary, 4-6-8bit)-TGT
	- Tests:
		- Given a BP, playability for empty lane (unplayable, verif)
		- Playability OK for first tile
		- Playability OK if building already present
		- Playability OK, building only in 1, unit advances and then becomes ok
		- Playability OK by skipping 1st one and allowing in 2nd
	- Building summoned properly, set in lane ok with ENGINE call
		- Tests:
			- Similar to unit tests, copy the idea
			- Verify count, etc
	- Bldg damage
		- Tests:
			- Bldg destroyed
			- Bldg survives
			- Bldg overkilled
- Stealth
- Implement complex effects:
	- Events (when an effect occurs globally and triggers a unit, e.g. EOT)
	- Events (hashable, serializable in unit but not on main). THEY ARE IMPLEMENTED THROUGH AN EVENT HANDLER IN THE STATE MACHINE, WHICH IS PROPERLY FILLED/EMPTIED WHEN PLACEABLE ENTERS/LEAVES
	- Filters	
	- Resulting action. Can this be done in a smooth way? Proposal: new class with Enum + <T1,T2,etc>. Idea is that similar to event handler, but with different enum, is processed where corresponds, and launched by event. By the time we reach unit effect, we run the effect, description of effect can also be fine tuned. E.g. effect, summons X (in lane), summons X (in lane), summons X (in lane), etc. 3 events. Skill card then also is simply a list of effects (when played). While playables have interrups.
	---
	- Buff tokens
	- Buff tok is just extra fields (hashable and serializable) on the placeable
- Deck-out
- Implement rest of rulebook
	- Todo...
	- Lots of individual mechanics that will be polished as it goes, individual card testing
