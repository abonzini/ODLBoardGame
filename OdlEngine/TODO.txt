Ongoing tasks in order of priority:
- Buildings
	- Building summoned properly, set in lane and tile with ENGINE call. Proper updating of tile/player fields and reversability
		- Tests:
			- Copy Unit tests, instantiation, counters, etc. Building placed
			Also, continue placeability:
			- All placeability tests should include actually trying to play the thing, to not only verify playOptions (source of important bug!) Revert if succesful and also check hashes. Need to do this once building is actually playable though
			- Playability fails if buildign already present
			- Playability suceeds if building present, due to unit advance
			- Playability correct with 2 units, one building, then the other
	- Implement building battle (e.g. marching damage), unit continues march
		- Tests:
			- Bldg destroyed
			- Bldg survives
			- Bldg overkilled
- Stealth
- Implement complex effects:
	- Events (when an effect occurs globally and triggers a unit, e.g. EOT)
	- Events (hashable, serializable in unit but not on main). THEY ARE IMPLEMENTED THROUGH AN EVENT HANDLER IN THE STATE MACHINE, WHICH IS PROPERLY FILLED/EMPTIED WHEN PLACEABLE ENTERS/LEAVES
	- Filters	
	- Resulting action. Can this be done in a smooth way? Proposal: new class with Enum + <T1,T2,etc>. Idea is that similar to event handler, but with different enum, is processed where corresponds, and launched by event. By the time we reach unit effect, we run the effect, description of effect can also be fine tuned. E.g. effect, summons X (in lane), summons X (in lane), summons X (in lane), etc. 3 events. Skill card then also is simply a list of effects (when played). While playables have interrups.
	---
	- Buff tokens
	- Buff tok is just extra fields (hashable and serializable) on the placeable
- Deck-out
- Implement rest of rulebook
	- Todo...
	- Lots of individual mechanics that will be polished as it goes, individual card testing
