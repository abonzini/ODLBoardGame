Ongoing tasks in order of priority:
- Stealth
	- Propose remaining correlation scheme and conditions
	- Add elements to entity
	- Add elements to manual
	- Play stelath loop plus correlations, complex when multiple buildings in a tile and the sort
	- Cases:
		- Unit w stealth building
		- Stealth unit w building
		- Stealth unit w stealth building
		- Stealth building position(s) and proper correlations
		- Discovery loop
		- Advancement and stealth, better handling of advancement context (not just clear if unit)
		- Advancement and stealth p2: Unit checks for loop of buildings and reveals until there's only one to attack
		- Discovery events? Combat discovers, (later there'll be other ones)
		- Complex playable context? building context also defining extra reveal situations and the sort, careful about this
	- Stealth test cases:
		- Stealth unit
		- Stealth building:
			- many summoned depending on buildability
		- Stealth correlation, when unit is revealed:
			- All negatives result in a discovery
			- A positive discovers all
		- Stealth unit revealed by pre combat
		- Stealth building revealed by pre-combat
		- Stealth building stacking
		- Stealth character construction, multiple cases
- Implement complex effects:
	- Events (when an effect occurs globally and triggers a unit, e.g. EOT). Loaded as dict <EventType, List<Entity>> of entities with the effect. This can be serialized, non-hashed.
	- Filters?
	---
	- Buff tokens
	- Buff tok is just extra fields (hashable and serializable) on the placeable
- Implement rest of rulebook
	- Procedure:
		- Propose card, way to code it
		- Add triginters if not there already
		- Ask yourself questions of how it could break the game, how it affects stealth, probably triginter related but good excercise
		- No individual card testing! Game must be mechanically robust even if cards are completely revamped
